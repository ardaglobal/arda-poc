// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package rent

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

var (
	md_Lease                          protoreflect.MessageDescriptor
	fd_Lease_id                       protoreflect.FieldDescriptor
	fd_Lease_propertyId               protoreflect.FieldDescriptor
	fd_Lease_tenant                   protoreflect.FieldDescriptor
	fd_Lease_rentAmount               protoreflect.FieldDescriptor
	fd_Lease_rentDueDate              protoreflect.FieldDescriptor
	fd_Lease_status                   protoreflect.FieldDescriptor
	fd_Lease_timePeriod               protoreflect.FieldDescriptor
	fd_Lease_paymentsOutstanding      protoreflect.FieldDescriptor
	fd_Lease_termLength               protoreflect.FieldDescriptor
	fd_Lease_recurringStatus          protoreflect.FieldDescriptor
	fd_Lease_cancellationPending      protoreflect.FieldDescriptor
	fd_Lease_cancellationInitiator    protoreflect.FieldDescriptor
	fd_Lease_cancellationDeadline     protoreflect.FieldDescriptor
	fd_Lease_lastPaymentBlock         protoreflect.FieldDescriptor
	fd_Lease_paymentTerms             protoreflect.FieldDescriptor
	fd_Lease_cancellationRequirements protoreflect.FieldDescriptor
	fd_Lease_creator                  protoreflect.FieldDescriptor
)

func init() {
	file_ardapoc_rent_lease_proto_init()
	md_Lease = File_ardapoc_rent_lease_proto.Messages().ByName("Lease")
	fd_Lease_id = md_Lease.Fields().ByName("id")
	fd_Lease_propertyId = md_Lease.Fields().ByName("propertyId")
	fd_Lease_tenant = md_Lease.Fields().ByName("tenant")
	fd_Lease_rentAmount = md_Lease.Fields().ByName("rentAmount")
	fd_Lease_rentDueDate = md_Lease.Fields().ByName("rentDueDate")
	fd_Lease_status = md_Lease.Fields().ByName("status")
	fd_Lease_timePeriod = md_Lease.Fields().ByName("timePeriod")
	fd_Lease_paymentsOutstanding = md_Lease.Fields().ByName("paymentsOutstanding")
	fd_Lease_termLength = md_Lease.Fields().ByName("termLength")
	fd_Lease_recurringStatus = md_Lease.Fields().ByName("recurringStatus")
	fd_Lease_cancellationPending = md_Lease.Fields().ByName("cancellationPending")
	fd_Lease_cancellationInitiator = md_Lease.Fields().ByName("cancellationInitiator")
	fd_Lease_cancellationDeadline = md_Lease.Fields().ByName("cancellationDeadline")
	fd_Lease_lastPaymentBlock = md_Lease.Fields().ByName("lastPaymentBlock")
	fd_Lease_paymentTerms = md_Lease.Fields().ByName("paymentTerms")
	fd_Lease_cancellationRequirements = md_Lease.Fields().ByName("cancellationRequirements")
	fd_Lease_creator = md_Lease.Fields().ByName("creator")
}

var _ protoreflect.Message = (*fastReflection_Lease)(nil)

type fastReflection_Lease Lease

func (x *Lease) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Lease)(x)
}

func (x *Lease) slowProtoReflect() protoreflect.Message {
	mi := &file_ardapoc_rent_lease_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Lease_messageType fastReflection_Lease_messageType
var _ protoreflect.MessageType = fastReflection_Lease_messageType{}

type fastReflection_Lease_messageType struct{}

func (x fastReflection_Lease_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Lease)(nil)
}
func (x fastReflection_Lease_messageType) New() protoreflect.Message {
	return new(fastReflection_Lease)
}
func (x fastReflection_Lease_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Lease
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Lease) Descriptor() protoreflect.MessageDescriptor {
	return md_Lease
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Lease) Type() protoreflect.MessageType {
	return _fastReflection_Lease_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Lease) New() protoreflect.Message {
	return new(fastReflection_Lease)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Lease) Interface() protoreflect.ProtoMessage {
	return (*Lease)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Lease) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Lease_id, value) {
			return
		}
	}
	if x.PropertyId != "" {
		value := protoreflect.ValueOfString(x.PropertyId)
		if !f(fd_Lease_propertyId, value) {
			return
		}
	}
	if x.Tenant != "" {
		value := protoreflect.ValueOfString(x.Tenant)
		if !f(fd_Lease_tenant, value) {
			return
		}
	}
	if x.RentAmount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RentAmount)
		if !f(fd_Lease_rentAmount, value) {
			return
		}
	}
	if x.RentDueDate != "" {
		value := protoreflect.ValueOfString(x.RentDueDate)
		if !f(fd_Lease_rentDueDate, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_Lease_status, value) {
			return
		}
	}
	if x.TimePeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TimePeriod)
		if !f(fd_Lease_timePeriod, value) {
			return
		}
	}
	if x.PaymentsOutstanding != "" {
		value := protoreflect.ValueOfString(x.PaymentsOutstanding)
		if !f(fd_Lease_paymentsOutstanding, value) {
			return
		}
	}
	if x.TermLength != "" {
		value := protoreflect.ValueOfString(x.TermLength)
		if !f(fd_Lease_termLength, value) {
			return
		}
	}
	if x.RecurringStatus != false {
		value := protoreflect.ValueOfBool(x.RecurringStatus)
		if !f(fd_Lease_recurringStatus, value) {
			return
		}
	}
	if x.CancellationPending != false {
		value := protoreflect.ValueOfBool(x.CancellationPending)
		if !f(fd_Lease_cancellationPending, value) {
			return
		}
	}
	if x.CancellationInitiator != "" {
		value := protoreflect.ValueOfString(x.CancellationInitiator)
		if !f(fd_Lease_cancellationInitiator, value) {
			return
		}
	}
	if x.CancellationDeadline != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CancellationDeadline)
		if !f(fd_Lease_cancellationDeadline, value) {
			return
		}
	}
	if x.LastPaymentBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastPaymentBlock)
		if !f(fd_Lease_lastPaymentBlock, value) {
			return
		}
	}
	if x.PaymentTerms != "" {
		value := protoreflect.ValueOfString(x.PaymentTerms)
		if !f(fd_Lease_paymentTerms, value) {
			return
		}
	}
	if x.CancellationRequirements != "" {
		value := protoreflect.ValueOfString(x.CancellationRequirements)
		if !f(fd_Lease_cancellationRequirements, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Lease_creator, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Lease) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ardapoc.rent.Lease.id":
		return x.Id != uint64(0)
	case "ardapoc.rent.Lease.propertyId":
		return x.PropertyId != ""
	case "ardapoc.rent.Lease.tenant":
		return x.Tenant != ""
	case "ardapoc.rent.Lease.rentAmount":
		return x.RentAmount != uint64(0)
	case "ardapoc.rent.Lease.rentDueDate":
		return x.RentDueDate != ""
	case "ardapoc.rent.Lease.status":
		return x.Status != ""
	case "ardapoc.rent.Lease.timePeriod":
		return x.TimePeriod != uint64(0)
	case "ardapoc.rent.Lease.paymentsOutstanding":
		return x.PaymentsOutstanding != ""
	case "ardapoc.rent.Lease.termLength":
		return x.TermLength != ""
	case "ardapoc.rent.Lease.recurringStatus":
		return x.RecurringStatus != false
	case "ardapoc.rent.Lease.cancellationPending":
		return x.CancellationPending != false
	case "ardapoc.rent.Lease.cancellationInitiator":
		return x.CancellationInitiator != ""
	case "ardapoc.rent.Lease.cancellationDeadline":
		return x.CancellationDeadline != uint64(0)
	case "ardapoc.rent.Lease.lastPaymentBlock":
		return x.LastPaymentBlock != uint64(0)
	case "ardapoc.rent.Lease.paymentTerms":
		return x.PaymentTerms != ""
	case "ardapoc.rent.Lease.cancellationRequirements":
		return x.CancellationRequirements != ""
	case "ardapoc.rent.Lease.creator":
		return x.Creator != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Lease) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ardapoc.rent.Lease.id":
		x.Id = uint64(0)
	case "ardapoc.rent.Lease.propertyId":
		x.PropertyId = ""
	case "ardapoc.rent.Lease.tenant":
		x.Tenant = ""
	case "ardapoc.rent.Lease.rentAmount":
		x.RentAmount = uint64(0)
	case "ardapoc.rent.Lease.rentDueDate":
		x.RentDueDate = ""
	case "ardapoc.rent.Lease.status":
		x.Status = ""
	case "ardapoc.rent.Lease.timePeriod":
		x.TimePeriod = uint64(0)
	case "ardapoc.rent.Lease.paymentsOutstanding":
		x.PaymentsOutstanding = ""
	case "ardapoc.rent.Lease.termLength":
		x.TermLength = ""
	case "ardapoc.rent.Lease.recurringStatus":
		x.RecurringStatus = false
	case "ardapoc.rent.Lease.cancellationPending":
		x.CancellationPending = false
	case "ardapoc.rent.Lease.cancellationInitiator":
		x.CancellationInitiator = ""
	case "ardapoc.rent.Lease.cancellationDeadline":
		x.CancellationDeadline = uint64(0)
	case "ardapoc.rent.Lease.lastPaymentBlock":
		x.LastPaymentBlock = uint64(0)
	case "ardapoc.rent.Lease.paymentTerms":
		x.PaymentTerms = ""
	case "ardapoc.rent.Lease.cancellationRequirements":
		x.CancellationRequirements = ""
	case "ardapoc.rent.Lease.creator":
		x.Creator = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Lease) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ardapoc.rent.Lease.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "ardapoc.rent.Lease.propertyId":
		value := x.PropertyId
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.tenant":
		value := x.Tenant
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.rentAmount":
		value := x.RentAmount
		return protoreflect.ValueOfUint64(value)
	case "ardapoc.rent.Lease.rentDueDate":
		value := x.RentDueDate
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.timePeriod":
		value := x.TimePeriod
		return protoreflect.ValueOfUint64(value)
	case "ardapoc.rent.Lease.paymentsOutstanding":
		value := x.PaymentsOutstanding
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.termLength":
		value := x.TermLength
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.recurringStatus":
		value := x.RecurringStatus
		return protoreflect.ValueOfBool(value)
	case "ardapoc.rent.Lease.cancellationPending":
		value := x.CancellationPending
		return protoreflect.ValueOfBool(value)
	case "ardapoc.rent.Lease.cancellationInitiator":
		value := x.CancellationInitiator
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.cancellationDeadline":
		value := x.CancellationDeadline
		return protoreflect.ValueOfUint64(value)
	case "ardapoc.rent.Lease.lastPaymentBlock":
		value := x.LastPaymentBlock
		return protoreflect.ValueOfUint64(value)
	case "ardapoc.rent.Lease.paymentTerms":
		value := x.PaymentTerms
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.cancellationRequirements":
		value := x.CancellationRequirements
		return protoreflect.ValueOfString(value)
	case "ardapoc.rent.Lease.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Lease) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ardapoc.rent.Lease.id":
		x.Id = value.Uint()
	case "ardapoc.rent.Lease.propertyId":
		x.PropertyId = value.Interface().(string)
	case "ardapoc.rent.Lease.tenant":
		x.Tenant = value.Interface().(string)
	case "ardapoc.rent.Lease.rentAmount":
		x.RentAmount = value.Uint()
	case "ardapoc.rent.Lease.rentDueDate":
		x.RentDueDate = value.Interface().(string)
	case "ardapoc.rent.Lease.status":
		x.Status = value.Interface().(string)
	case "ardapoc.rent.Lease.timePeriod":
		x.TimePeriod = value.Uint()
	case "ardapoc.rent.Lease.paymentsOutstanding":
		x.PaymentsOutstanding = value.Interface().(string)
	case "ardapoc.rent.Lease.termLength":
		x.TermLength = value.Interface().(string)
	case "ardapoc.rent.Lease.recurringStatus":
		x.RecurringStatus = value.Bool()
	case "ardapoc.rent.Lease.cancellationPending":
		x.CancellationPending = value.Bool()
	case "ardapoc.rent.Lease.cancellationInitiator":
		x.CancellationInitiator = value.Interface().(string)
	case "ardapoc.rent.Lease.cancellationDeadline":
		x.CancellationDeadline = value.Uint()
	case "ardapoc.rent.Lease.lastPaymentBlock":
		x.LastPaymentBlock = value.Uint()
	case "ardapoc.rent.Lease.paymentTerms":
		x.PaymentTerms = value.Interface().(string)
	case "ardapoc.rent.Lease.cancellationRequirements":
		x.CancellationRequirements = value.Interface().(string)
	case "ardapoc.rent.Lease.creator":
		x.Creator = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Lease) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ardapoc.rent.Lease.id":
		panic(fmt.Errorf("field id of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.propertyId":
		panic(fmt.Errorf("field propertyId of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.tenant":
		panic(fmt.Errorf("field tenant of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.rentAmount":
		panic(fmt.Errorf("field rentAmount of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.rentDueDate":
		panic(fmt.Errorf("field rentDueDate of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.status":
		panic(fmt.Errorf("field status of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.timePeriod":
		panic(fmt.Errorf("field timePeriod of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.paymentsOutstanding":
		panic(fmt.Errorf("field paymentsOutstanding of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.termLength":
		panic(fmt.Errorf("field termLength of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.recurringStatus":
		panic(fmt.Errorf("field recurringStatus of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.cancellationPending":
		panic(fmt.Errorf("field cancellationPending of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.cancellationInitiator":
		panic(fmt.Errorf("field cancellationInitiator of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.cancellationDeadline":
		panic(fmt.Errorf("field cancellationDeadline of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.lastPaymentBlock":
		panic(fmt.Errorf("field lastPaymentBlock of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.paymentTerms":
		panic(fmt.Errorf("field paymentTerms of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.cancellationRequirements":
		panic(fmt.Errorf("field cancellationRequirements of message ardapoc.rent.Lease is not mutable"))
	case "ardapoc.rent.Lease.creator":
		panic(fmt.Errorf("field creator of message ardapoc.rent.Lease is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Lease) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ardapoc.rent.Lease.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ardapoc.rent.Lease.propertyId":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.tenant":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.rentAmount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ardapoc.rent.Lease.rentDueDate":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.status":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.timePeriod":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ardapoc.rent.Lease.paymentsOutstanding":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.termLength":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.recurringStatus":
		return protoreflect.ValueOfBool(false)
	case "ardapoc.rent.Lease.cancellationPending":
		return protoreflect.ValueOfBool(false)
	case "ardapoc.rent.Lease.cancellationInitiator":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.cancellationDeadline":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ardapoc.rent.Lease.lastPaymentBlock":
		return protoreflect.ValueOfUint64(uint64(0))
	case "ardapoc.rent.Lease.paymentTerms":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.cancellationRequirements":
		return protoreflect.ValueOfString("")
	case "ardapoc.rent.Lease.creator":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ardapoc.rent.Lease"))
		}
		panic(fmt.Errorf("message ardapoc.rent.Lease does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Lease) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ardapoc.rent.Lease", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Lease) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Lease) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Lease) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Lease) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Lease)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.PropertyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Tenant)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RentAmount != 0 {
			n += 1 + runtime.Sov(uint64(x.RentAmount))
		}
		l = len(x.RentDueDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TimePeriod != 0 {
			n += 1 + runtime.Sov(uint64(x.TimePeriod))
		}
		l = len(x.PaymentsOutstanding)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TermLength)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RecurringStatus {
			n += 2
		}
		if x.CancellationPending {
			n += 2
		}
		l = len(x.CancellationInitiator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CancellationDeadline != 0 {
			n += 1 + runtime.Sov(uint64(x.CancellationDeadline))
		}
		if x.LastPaymentBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.LastPaymentBlock))
		}
		l = len(x.PaymentTerms)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CancellationRequirements)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Lease)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.CancellationRequirements) > 0 {
			i -= len(x.CancellationRequirements)
			copy(dAtA[i:], x.CancellationRequirements)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CancellationRequirements)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.PaymentTerms) > 0 {
			i -= len(x.PaymentTerms)
			copy(dAtA[i:], x.PaymentTerms)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PaymentTerms)))
			i--
			dAtA[i] = 0x7a
		}
		if x.LastPaymentBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastPaymentBlock))
			i--
			dAtA[i] = 0x70
		}
		if x.CancellationDeadline != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CancellationDeadline))
			i--
			dAtA[i] = 0x68
		}
		if len(x.CancellationInitiator) > 0 {
			i -= len(x.CancellationInitiator)
			copy(dAtA[i:], x.CancellationInitiator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CancellationInitiator)))
			i--
			dAtA[i] = 0x62
		}
		if x.CancellationPending {
			i--
			if x.CancellationPending {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.RecurringStatus {
			i--
			if x.RecurringStatus {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if len(x.TermLength) > 0 {
			i -= len(x.TermLength)
			copy(dAtA[i:], x.TermLength)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TermLength)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.PaymentsOutstanding) > 0 {
			i -= len(x.PaymentsOutstanding)
			copy(dAtA[i:], x.PaymentsOutstanding)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PaymentsOutstanding)))
			i--
			dAtA[i] = 0x42
		}
		if x.TimePeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TimePeriod))
			i--
			dAtA[i] = 0x38
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.RentDueDate) > 0 {
			i -= len(x.RentDueDate)
			copy(dAtA[i:], x.RentDueDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RentDueDate)))
			i--
			dAtA[i] = 0x2a
		}
		if x.RentAmount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RentAmount))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Tenant) > 0 {
			i -= len(x.Tenant)
			copy(dAtA[i:], x.Tenant)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Tenant)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PropertyId) > 0 {
			i -= len(x.PropertyId)
			copy(dAtA[i:], x.PropertyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PropertyId)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Lease)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Lease: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PropertyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PropertyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tenant = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RentAmount", wireType)
				}
				x.RentAmount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RentAmount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RentDueDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RentDueDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
				}
				x.TimePeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TimePeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PaymentsOutstanding", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PaymentsOutstanding = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TermLength", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TermLength = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecurringStatus", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.RecurringStatus = bool(v != 0)
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CancellationPending", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.CancellationPending = bool(v != 0)
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CancellationInitiator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CancellationInitiator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CancellationDeadline", wireType)
				}
				x.CancellationDeadline = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CancellationDeadline |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastPaymentBlock", wireType)
				}
				x.LastPaymentBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastPaymentBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PaymentTerms", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PaymentTerms = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CancellationRequirements", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CancellationRequirements = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ardapoc/rent/lease.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Lease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PropertyId               string `protobuf:"bytes,2,opt,name=propertyId,proto3" json:"propertyId,omitempty"`
	Tenant                   string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	RentAmount               uint64 `protobuf:"varint,4,opt,name=rentAmount,proto3" json:"rentAmount,omitempty"`
	RentDueDate              string `protobuf:"bytes,5,opt,name=rentDueDate,proto3" json:"rentDueDate,omitempty"`
	Status                   string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	TimePeriod               uint64 `protobuf:"varint,7,opt,name=timePeriod,proto3" json:"timePeriod,omitempty"`
	PaymentsOutstanding      string `protobuf:"bytes,8,opt,name=paymentsOutstanding,proto3" json:"paymentsOutstanding,omitempty"`
	TermLength               string `protobuf:"bytes,9,opt,name=termLength,proto3" json:"termLength,omitempty"`
	RecurringStatus          bool   `protobuf:"varint,10,opt,name=recurringStatus,proto3" json:"recurringStatus,omitempty"`
	CancellationPending      bool   `protobuf:"varint,11,opt,name=cancellationPending,proto3" json:"cancellationPending,omitempty"`
	CancellationInitiator    string `protobuf:"bytes,12,opt,name=cancellationInitiator,proto3" json:"cancellationInitiator,omitempty"`
	CancellationDeadline     uint64 `protobuf:"varint,13,opt,name=cancellationDeadline,proto3" json:"cancellationDeadline,omitempty"`
	LastPaymentBlock         uint64 `protobuf:"varint,14,opt,name=lastPaymentBlock,proto3" json:"lastPaymentBlock,omitempty"`
	PaymentTerms             string `protobuf:"bytes,15,opt,name=paymentTerms,proto3" json:"paymentTerms,omitempty"`
	CancellationRequirements string `protobuf:"bytes,16,opt,name=cancellationRequirements,proto3" json:"cancellationRequirements,omitempty"`
	Creator                  string `protobuf:"bytes,17,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *Lease) Reset() {
	*x = Lease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ardapoc_rent_lease_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease) ProtoMessage() {}

// Deprecated: Use Lease.ProtoReflect.Descriptor instead.
func (*Lease) Descriptor() ([]byte, []int) {
	return file_ardapoc_rent_lease_proto_rawDescGZIP(), []int{0}
}

func (x *Lease) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lease) GetPropertyId() string {
	if x != nil {
		return x.PropertyId
	}
	return ""
}

func (x *Lease) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Lease) GetRentAmount() uint64 {
	if x != nil {
		return x.RentAmount
	}
	return 0
}

func (x *Lease) GetRentDueDate() string {
	if x != nil {
		return x.RentDueDate
	}
	return ""
}

func (x *Lease) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Lease) GetTimePeriod() uint64 {
	if x != nil {
		return x.TimePeriod
	}
	return 0
}

func (x *Lease) GetPaymentsOutstanding() string {
	if x != nil {
		return x.PaymentsOutstanding
	}
	return ""
}

func (x *Lease) GetTermLength() string {
	if x != nil {
		return x.TermLength
	}
	return ""
}

func (x *Lease) GetRecurringStatus() bool {
	if x != nil {
		return x.RecurringStatus
	}
	return false
}

func (x *Lease) GetCancellationPending() bool {
	if x != nil {
		return x.CancellationPending
	}
	return false
}

func (x *Lease) GetCancellationInitiator() string {
	if x != nil {
		return x.CancellationInitiator
	}
	return ""
}

func (x *Lease) GetCancellationDeadline() uint64 {
	if x != nil {
		return x.CancellationDeadline
	}
	return 0
}

func (x *Lease) GetLastPaymentBlock() uint64 {
	if x != nil {
		return x.LastPaymentBlock
	}
	return 0
}

func (x *Lease) GetPaymentTerms() string {
	if x != nil {
		return x.PaymentTerms
	}
	return ""
}

func (x *Lease) GetCancellationRequirements() string {
	if x != nil {
		return x.CancellationRequirements
	}
	return ""
}

func (x *Lease) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

var File_ardapoc_rent_lease_proto protoreflect.FileDescriptor

var file_ardapoc_rent_lease_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x2f, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x72, 0x64, 0x61,
	0x70, 0x6f, 0x63, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x05, 0x0a, 0x05, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x18,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x89, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x64, 0x61, 0x70,
	0x6f, 0x63, 0x2e, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x18, 0x61, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x2f, 0x72, 0x65, 0x6e, 0x74, 0xa2,
	0x02, 0x03, 0x41, 0x52, 0x58, 0xaa, 0x02, 0x0c, 0x41, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x2e,
	0x52, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x0c, 0x41, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x5c, 0x52,
	0x65, 0x6e, 0x74, 0xe2, 0x02, 0x18, 0x41, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x5c, 0x52, 0x65,
	0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0d, 0x41, 0x72, 0x64, 0x61, 0x70, 0x6f, 0x63, 0x3a, 0x3a, 0x52, 0x65, 0x6e, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ardapoc_rent_lease_proto_rawDescOnce sync.Once
	file_ardapoc_rent_lease_proto_rawDescData = file_ardapoc_rent_lease_proto_rawDesc
)

func file_ardapoc_rent_lease_proto_rawDescGZIP() []byte {
	file_ardapoc_rent_lease_proto_rawDescOnce.Do(func() {
		file_ardapoc_rent_lease_proto_rawDescData = protoimpl.X.CompressGZIP(file_ardapoc_rent_lease_proto_rawDescData)
	})
	return file_ardapoc_rent_lease_proto_rawDescData
}

var file_ardapoc_rent_lease_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ardapoc_rent_lease_proto_goTypes = []interface{}{
	(*Lease)(nil), // 0: ardapoc.rent.Lease
}
var file_ardapoc_rent_lease_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ardapoc_rent_lease_proto_init() }
func file_ardapoc_rent_lease_proto_init() {
	if File_ardapoc_rent_lease_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ardapoc_rent_lease_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ardapoc_rent_lease_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ardapoc_rent_lease_proto_goTypes,
		DependencyIndexes: file_ardapoc_rent_lease_proto_depIdxs,
		MessageInfos:      file_ardapoc_rent_lease_proto_msgTypes,
	}.Build()
	File_ardapoc_rent_lease_proto = out.File
	file_ardapoc_rent_lease_proto_rawDesc = nil
	file_ardapoc_rent_lease_proto_goTypes = nil
	file_ardapoc_rent_lease_proto_depIdxs = nil
}
