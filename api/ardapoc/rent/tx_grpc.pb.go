// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ardapoc/rent/tx.proto

package rent

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName         = "/ardapoc.rent.Msg/UpdateParams"
	Msg_CreateLease_FullMethodName          = "/ardapoc.rent.Msg/CreateLease"
	Msg_UpdateLease_FullMethodName          = "/ardapoc.rent.Msg/UpdateLease"
	Msg_DeleteLease_FullMethodName          = "/ardapoc.rent.Msg/DeleteLease"
	Msg_PayRent_FullMethodName              = "/ardapoc.rent.Msg/PayRent"
	Msg_InitiateCancellation_FullMethodName = "/ardapoc.rent.Msg/InitiateCancellation"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateLease(ctx context.Context, in *MsgCreateLease, opts ...grpc.CallOption) (*MsgCreateLeaseResponse, error)
	UpdateLease(ctx context.Context, in *MsgUpdateLease, opts ...grpc.CallOption) (*MsgUpdateLeaseResponse, error)
	DeleteLease(ctx context.Context, in *MsgDeleteLease, opts ...grpc.CallOption) (*MsgDeleteLeaseResponse, error)
	PayRent(ctx context.Context, in *MsgPayRent, opts ...grpc.CallOption) (*MsgPayRentResponse, error)
	InitiateCancellation(ctx context.Context, in *MsgInitiateCancellation, opts ...grpc.CallOption) (*MsgInitiateCancellationResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLease(ctx context.Context, in *MsgCreateLease, opts ...grpc.CallOption) (*MsgCreateLeaseResponse, error) {
	out := new(MsgCreateLeaseResponse)
	err := c.cc.Invoke(ctx, Msg_CreateLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLease(ctx context.Context, in *MsgUpdateLease, opts ...grpc.CallOption) (*MsgUpdateLeaseResponse, error) {
	out := new(MsgUpdateLeaseResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteLease(ctx context.Context, in *MsgDeleteLease, opts ...grpc.CallOption) (*MsgDeleteLeaseResponse, error) {
	out := new(MsgDeleteLeaseResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteLease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayRent(ctx context.Context, in *MsgPayRent, opts ...grpc.CallOption) (*MsgPayRentResponse, error) {
	out := new(MsgPayRentResponse)
	err := c.cc.Invoke(ctx, Msg_PayRent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateCancellation(ctx context.Context, in *MsgInitiateCancellation, opts ...grpc.CallOption) (*MsgInitiateCancellationResponse, error) {
	out := new(MsgInitiateCancellationResponse)
	err := c.cc.Invoke(ctx, Msg_InitiateCancellation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateLease(context.Context, *MsgCreateLease) (*MsgCreateLeaseResponse, error)
	UpdateLease(context.Context, *MsgUpdateLease) (*MsgUpdateLeaseResponse, error)
	DeleteLease(context.Context, *MsgDeleteLease) (*MsgDeleteLeaseResponse, error)
	PayRent(context.Context, *MsgPayRent) (*MsgPayRentResponse, error)
	InitiateCancellation(context.Context, *MsgInitiateCancellation) (*MsgInitiateCancellationResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateLease(context.Context, *MsgCreateLease) (*MsgCreateLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLease not implemented")
}
func (UnimplementedMsgServer) UpdateLease(context.Context, *MsgUpdateLease) (*MsgUpdateLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLease not implemented")
}
func (UnimplementedMsgServer) DeleteLease(context.Context, *MsgDeleteLease) (*MsgDeleteLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLease not implemented")
}
func (UnimplementedMsgServer) PayRent(context.Context, *MsgPayRent) (*MsgPayRentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRent not implemented")
}
func (UnimplementedMsgServer) InitiateCancellation(context.Context, *MsgInitiateCancellation) (*MsgInitiateCancellationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCancellation not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLease(ctx, req.(*MsgCreateLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLease(ctx, req.(*MsgUpdateLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteLease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteLease(ctx, req.(*MsgDeleteLease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayRent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PayRent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayRent(ctx, req.(*MsgPayRent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateCancellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateCancellation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateCancellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitiateCancellation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateCancellation(ctx, req.(*MsgInitiateCancellation))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ardapoc.rent.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateLease",
			Handler:    _Msg_CreateLease_Handler,
		},
		{
			MethodName: "UpdateLease",
			Handler:    _Msg_UpdateLease_Handler,
		},
		{
			MethodName: "DeleteLease",
			Handler:    _Msg_DeleteLease_Handler,
		},
		{
			MethodName: "PayRent",
			Handler:    _Msg_PayRent_Handler,
		},
		{
			MethodName: "InitiateCancellation",
			Handler:    _Msg_InitiateCancellation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ardapoc/rent/tx.proto",
}
