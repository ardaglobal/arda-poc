// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardapoc/rent/lease.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lease struct {
	Id                       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PropertyId               string `protobuf:"bytes,2,opt,name=propertyId,proto3" json:"propertyId,omitempty"`
	Tenant                   string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	RentAmount               uint64 `protobuf:"varint,4,opt,name=rentAmount,proto3" json:"rentAmount,omitempty"`
	RentDueDate              string `protobuf:"bytes,5,opt,name=rentDueDate,proto3" json:"rentDueDate,omitempty"`
	Status                   string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	TimePeriod               uint64 `protobuf:"varint,7,opt,name=timePeriod,proto3" json:"timePeriod,omitempty"`
	PaymentsOutstanding      string `protobuf:"bytes,8,opt,name=paymentsOutstanding,proto3" json:"paymentsOutstanding,omitempty"`
	TermLength               string `protobuf:"bytes,9,opt,name=termLength,proto3" json:"termLength,omitempty"`
	RecurringStatus          bool   `protobuf:"varint,10,opt,name=recurringStatus,proto3" json:"recurringStatus,omitempty"`
	CancellationPending      bool   `protobuf:"varint,11,opt,name=cancellationPending,proto3" json:"cancellationPending,omitempty"`
	CancellationInitiator    string `protobuf:"bytes,12,opt,name=cancellationInitiator,proto3" json:"cancellationInitiator,omitempty"`
	CancellationDeadline     uint64 `protobuf:"varint,13,opt,name=cancellationDeadline,proto3" json:"cancellationDeadline,omitempty"`
	LastPaymentBlock         uint64 `protobuf:"varint,14,opt,name=lastPaymentBlock,proto3" json:"lastPaymentBlock,omitempty"`
	PaymentTerms             string `protobuf:"bytes,15,opt,name=paymentTerms,proto3" json:"paymentTerms,omitempty"`
	CancellationRequirements string `protobuf:"bytes,16,opt,name=cancellationRequirements,proto3" json:"cancellationRequirements,omitempty"`
	Creator                  string `protobuf:"bytes,17,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cc901b99ed10e9c, []int{0}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Lease) GetPropertyId() string {
	if m != nil {
		return m.PropertyId
	}
	return ""
}

func (m *Lease) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Lease) GetRentAmount() uint64 {
	if m != nil {
		return m.RentAmount
	}
	return 0
}

func (m *Lease) GetRentDueDate() string {
	if m != nil {
		return m.RentDueDate
	}
	return ""
}

func (m *Lease) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Lease) GetTimePeriod() uint64 {
	if m != nil {
		return m.TimePeriod
	}
	return 0
}

func (m *Lease) GetPaymentsOutstanding() string {
	if m != nil {
		return m.PaymentsOutstanding
	}
	return ""
}

func (m *Lease) GetTermLength() string {
	if m != nil {
		return m.TermLength
	}
	return ""
}

func (m *Lease) GetRecurringStatus() bool {
	if m != nil {
		return m.RecurringStatus
	}
	return false
}

func (m *Lease) GetCancellationPending() bool {
	if m != nil {
		return m.CancellationPending
	}
	return false
}

func (m *Lease) GetCancellationInitiator() string {
	if m != nil {
		return m.CancellationInitiator
	}
	return ""
}

func (m *Lease) GetCancellationDeadline() uint64 {
	if m != nil {
		return m.CancellationDeadline
	}
	return 0
}

func (m *Lease) GetLastPaymentBlock() uint64 {
	if m != nil {
		return m.LastPaymentBlock
	}
	return 0
}

func (m *Lease) GetPaymentTerms() string {
	if m != nil {
		return m.PaymentTerms
	}
	return ""
}

func (m *Lease) GetCancellationRequirements() string {
	if m != nil {
		return m.CancellationRequirements
	}
	return ""
}

func (m *Lease) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Lease)(nil), "ardapoc.rent.Lease")
}

func init() { proto.RegisterFile("ardapoc/rent/lease.proto", fileDescriptor_1cc901b99ed10e9c) }

var fileDescriptor_1cc901b99ed10e9c = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xd0, 0xa4, 0xed, 0x34, 0xb4, 0x65, 0xf9, 0xd0, 0x9c, 0xac, 0xa8, 0xa7, 0x08,
	0x44, 0x82, 0x80, 0x13, 0x37, 0xaa, 0x70, 0xa8, 0x54, 0x89, 0x28, 0x70, 0xe2, 0xb6, 0xb1, 0x47,
	0xee, 0x0a, 0x7b, 0xd7, 0xac, 0xc7, 0x12, 0x79, 0x02, 0xae, 0x3c, 0x16, 0xc7, 0x1e, 0x39, 0xa2,
	0xe4, 0x45, 0xd0, 0x8e, 0x83, 0x62, 0xc0, 0xbd, 0xed, 0xfc, 0x7f, 0xb3, 0xff, 0xf9, 0xd0, 0x00,
	0x6a, 0x9f, 0xea, 0xd2, 0x25, 0x33, 0x4f, 0x96, 0x67, 0x39, 0xe9, 0x8a, 0xa6, 0xa5, 0x77, 0xec,
	0xd4, 0x68, 0x47, 0xa6, 0x81, 0x5c, 0x7c, 0x1b, 0xc0, 0xe0, 0x3a, 0x50, 0x75, 0x0a, 0x7d, 0x93,
	0x62, 0x34, 0x8e, 0x26, 0x07, 0xcb, 0xbe, 0x49, 0x55, 0x0c, 0x50, 0x7a, 0x57, 0x92, 0xe7, 0xf5,
	0x55, 0x8a, 0xfd, 0x71, 0x34, 0x39, 0x5e, 0xb6, 0x14, 0xf5, 0x04, 0x86, 0x4c, 0x56, 0x5b, 0xc6,
	0x7b, 0xc2, 0x76, 0x51, 0xf8, 0x17, 0x9c, 0xdf, 0x16, 0xae, 0xb6, 0x8c, 0x07, 0xe2, 0xd7, 0x52,
	0xd4, 0x18, 0x4e, 0x42, 0x34, 0xaf, 0x69, 0xae, 0x99, 0x70, 0x20, 0x9f, 0xdb, 0x52, 0x70, 0xae,
	0x58, 0x73, 0x5d, 0xe1, 0xb0, 0x71, 0x6e, 0xa2, 0xe0, 0xcc, 0xa6, 0xa0, 0x05, 0x79, 0xe3, 0x52,
	0x3c, 0x6c, 0x9c, 0xf7, 0x8a, 0x7a, 0x01, 0x0f, 0x4b, 0xbd, 0x2e, 0xc8, 0x72, 0xf5, 0xbe, 0xe6,
	0x8a, 0xb5, 0x4d, 0x8d, 0xcd, 0xf0, 0x48, 0x4c, 0xba, 0x90, 0x38, 0x92, 0x2f, 0xae, 0xc9, 0x66,
	0x7c, 0x83, 0xc7, 0xcd, 0x8c, 0x7b, 0x45, 0x4d, 0xe0, 0xcc, 0x53, 0x52, 0x7b, 0x6f, 0x6c, 0xf6,
	0xa1, 0x69, 0x09, 0xc6, 0xd1, 0xe4, 0x68, 0xf9, 0xaf, 0x1c, 0x6a, 0x27, 0xda, 0x26, 0x94, 0xe7,
	0x9a, 0x8d, 0xb3, 0x0b, 0x6a, 0x6a, 0x9f, 0x48, 0x76, 0x17, 0x52, 0xaf, 0xe1, 0x71, 0x5b, 0xbe,
	0xb2, 0x86, 0x8d, 0x66, 0xe7, 0x71, 0x24, 0x6d, 0x74, 0x43, 0xf5, 0x12, 0x1e, 0xb5, 0xc1, 0x9c,
	0x74, 0x9a, 0x1b, 0x4b, 0x78, 0x5f, 0xb6, 0xd1, 0xc9, 0xd4, 0x53, 0x38, 0xcf, 0x75, 0xc5, 0x8b,
	0x66, 0x01, 0x97, 0xb9, 0x4b, 0x3e, 0xe3, 0xa9, 0xe4, 0xff, 0xa7, 0xab, 0x0b, 0x18, 0xed, 0x16,
	0xf5, 0x91, 0x7c, 0x51, 0xe1, 0x99, 0x34, 0xf3, 0x97, 0xa6, 0xde, 0x00, 0xb6, 0xeb, 0x2c, 0xe9,
	0x4b, 0x6d, 0x3c, 0xc9, 0x72, 0xf1, 0x5c, 0xf2, 0xef, 0xe4, 0x0a, 0xe1, 0x30, 0xf1, 0x24, 0x73,
	0x3e, 0x90, 0xd4, 0x3f, 0xe1, 0xe5, 0xbb, 0x1f, 0x9b, 0x38, 0xba, 0xdd, 0xc4, 0xd1, 0xaf, 0x4d,
	0x1c, 0x7d, 0xdf, 0xc6, 0xbd, 0xdb, 0x6d, 0xdc, 0xfb, 0xb9, 0x8d, 0x7b, 0x9f, 0x9e, 0x65, 0x86,
	0x6f, 0xea, 0xd5, 0x34, 0x71, 0xc5, 0x2c, 0x1c, 0x6f, 0x96, 0xbb, 0x95, 0xce, 0xe5, 0xf9, 0x3c,
	0x9c, 0xf8, 0xd7, 0xe6, 0xc8, 0x79, 0x5d, 0x52, 0xb5, 0x1a, 0xca, 0x95, 0xbf, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x82, 0xf8, 0xa9, 0x88, 0x01, 0x03, 0x00, 0x00,
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLease(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.CancellationRequirements) > 0 {
		i -= len(m.CancellationRequirements)
		copy(dAtA[i:], m.CancellationRequirements)
		i = encodeVarintLease(dAtA, i, uint64(len(m.CancellationRequirements)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PaymentTerms) > 0 {
		i -= len(m.PaymentTerms)
		copy(dAtA[i:], m.PaymentTerms)
		i = encodeVarintLease(dAtA, i, uint64(len(m.PaymentTerms)))
		i--
		dAtA[i] = 0x7a
	}
	if m.LastPaymentBlock != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.LastPaymentBlock))
		i--
		dAtA[i] = 0x70
	}
	if m.CancellationDeadline != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.CancellationDeadline))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CancellationInitiator) > 0 {
		i -= len(m.CancellationInitiator)
		copy(dAtA[i:], m.CancellationInitiator)
		i = encodeVarintLease(dAtA, i, uint64(len(m.CancellationInitiator)))
		i--
		dAtA[i] = 0x62
	}
	if m.CancellationPending {
		i--
		if m.CancellationPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.RecurringStatus {
		i--
		if m.RecurringStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.TermLength) > 0 {
		i -= len(m.TermLength)
		copy(dAtA[i:], m.TermLength)
		i = encodeVarintLease(dAtA, i, uint64(len(m.TermLength)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PaymentsOutstanding) > 0 {
		i -= len(m.PaymentsOutstanding)
		copy(dAtA[i:], m.PaymentsOutstanding)
		i = encodeVarintLease(dAtA, i, uint64(len(m.PaymentsOutstanding)))
		i--
		dAtA[i] = 0x42
	}
	if m.TimePeriod != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.TimePeriod))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLease(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RentDueDate) > 0 {
		i -= len(m.RentDueDate)
		copy(dAtA[i:], m.RentDueDate)
		i = encodeVarintLease(dAtA, i, uint64(len(m.RentDueDate)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RentAmount != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.RentAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLease(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PropertyId) > 0 {
		i -= len(m.PropertyId)
		copy(dAtA[i:], m.PropertyId)
		i = encodeVarintLease(dAtA, i, uint64(len(m.PropertyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLease(uint64(m.Id))
	}
	l = len(m.PropertyId)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	if m.RentAmount != 0 {
		n += 1 + sovLease(uint64(m.RentAmount))
	}
	l = len(m.RentDueDate)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	if m.TimePeriod != 0 {
		n += 1 + sovLease(uint64(m.TimePeriod))
	}
	l = len(m.PaymentsOutstanding)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = len(m.TermLength)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	if m.RecurringStatus {
		n += 2
	}
	if m.CancellationPending {
		n += 2
	}
	l = len(m.CancellationInitiator)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	if m.CancellationDeadline != 0 {
		n += 1 + sovLease(uint64(m.CancellationDeadline))
	}
	if m.LastPaymentBlock != 0 {
		n += 1 + sovLease(uint64(m.LastPaymentBlock))
	}
	l = len(m.PaymentTerms)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	l = len(m.CancellationRequirements)
	if l > 0 {
		n += 2 + l + sovLease(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovLease(uint64(l))
	}
	return n
}

func sovLease(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentAmount", wireType)
			}
			m.RentAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RentAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentDueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RentDueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
			}
			m.TimePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentsOutstanding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentsOutstanding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TermLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TermLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecurringStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecurringStatus = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancellationPending = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationInitiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancellationInitiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationDeadline", wireType)
			}
			m.CancellationDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancellationDeadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPaymentBlock", wireType)
			}
			m.LastPaymentBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPaymentBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTerms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentTerms = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationRequirements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancellationRequirements = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)
