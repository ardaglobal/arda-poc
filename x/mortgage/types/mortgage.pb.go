// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardapoc/mortgage/mortgage.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mortgage struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Lender       string `protobuf:"bytes,2,opt,name=lender,proto3" json:"lender,omitempty"`
	Lendee       string `protobuf:"bytes,3,opt,name=lendee,proto3" json:"lendee,omitempty"`
	Collateral   string `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral,omitempty"`
	Amount       uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	InterestRate string `protobuf:"bytes,6,opt,name=interestRate,proto3" json:"interestRate,omitempty"`
	Term         string `protobuf:"bytes,7,opt,name=term,proto3" json:"term,omitempty"`
	Creator      string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Mortgage) Reset()         { *m = Mortgage{} }
func (m *Mortgage) String() string { return proto.CompactTextString(m) }
func (*Mortgage) ProtoMessage()    {}
func (*Mortgage) Descriptor() ([]byte, []int) {
	return fileDescriptor_247875c39e7208c6, []int{0}
}
func (m *Mortgage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mortgage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mortgage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mortgage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mortgage.Merge(m, src)
}
func (m *Mortgage) XXX_Size() int {
	return m.Size()
}
func (m *Mortgage) XXX_DiscardUnknown() {
	xxx_messageInfo_Mortgage.DiscardUnknown(m)
}

var xxx_messageInfo_Mortgage proto.InternalMessageInfo

func (m *Mortgage) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Mortgage) GetLender() string {
	if m != nil {
		return m.Lender
	}
	return ""
}

func (m *Mortgage) GetLendee() string {
	if m != nil {
		return m.Lendee
	}
	return ""
}

func (m *Mortgage) GetCollateral() string {
	if m != nil {
		return m.Collateral
	}
	return ""
}

func (m *Mortgage) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Mortgage) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

func (m *Mortgage) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Mortgage) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Mortgage)(nil), "ardapoc.mortgage.Mortgage")
}

func init() { proto.RegisterFile("ardapoc/mortgage/mortgage.proto", fileDescriptor_247875c39e7208c6) }

var fileDescriptor_247875c39e7208c6 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x48, 0xd3, 0x62, 0x31, 0x20, 0x0b, 0x21, 0x4f, 0xa6, 0xea, 0xd4, 0x85, 0x64,
	0xe0, 0x0d, 0xd8, 0x18, 0x58, 0x32, 0xb2, 0x39, 0xc9, 0x29, 0x44, 0x72, 0x72, 0xd1, 0xf5, 0x2a,
	0x95, 0xb7, 0xe0, 0xb1, 0x18, 0x3b, 0x22, 0x26, 0x94, 0xbc, 0x08, 0x8a, 0x71, 0x4b, 0xbb, 0xfd,
	0xdf, 0x77, 0xf7, 0x2f, 0xbf, 0xbc, 0xb7, 0x54, 0xd9, 0x1e, 0xcb, 0xac, 0x45, 0xe2, 0xda, 0xd6,
	0x70, 0x0c, 0x69, 0x4f, 0xc8, 0xa8, 0x6e, 0xc2, 0x43, 0x7a, 0xf0, 0xab, 0x6f, 0x21, 0x17, 0x2f,
	0x01, 0xd4, 0xad, 0x9c, 0x35, 0x5d, 0x05, 0x3b, 0x2d, 0x96, 0x62, 0x7d, 0x95, 0xff, 0x81, 0xba,
	0x93, 0x89, 0x83, 0xae, 0x02, 0xd2, 0x17, 0x5e, 0x07, 0x3a, 0x7a, 0xd0, 0x97, 0x27, 0x1e, 0x94,
	0x91, 0xb2, 0x44, 0xe7, 0x2c, 0x03, 0x59, 0xa7, 0x63, 0x7f, 0x3b, 0x31, 0x53, 0xcf, 0xb6, 0xb8,
	0xed, 0x58, 0xcf, 0x96, 0x62, 0x1d, 0xe7, 0x81, 0xd4, 0x4a, 0x5e, 0x37, 0x1d, 0x03, 0xc1, 0x86,
	0x73, 0xcb, 0xa0, 0x13, 0xdf, 0x3c, 0x73, 0x4a, 0xc9, 0x98, 0x81, 0x5a, 0x3d, 0xf7, 0x37, 0x9f,
	0x95, 0x96, 0xf3, 0x92, 0xc0, 0x32, 0x92, 0x5e, 0x78, 0x7d, 0xc0, 0xa7, 0xe7, 0xcf, 0xc1, 0x88,
	0xfd, 0x60, 0xc4, 0xcf, 0x60, 0xc4, 0xc7, 0x68, 0xa2, 0xfd, 0x68, 0xa2, 0xaf, 0xd1, 0x44, 0xaf,
	0x59, 0xdd, 0xf0, 0xdb, 0xb6, 0x48, 0x4b, 0x6c, 0xb3, 0x69, 0x93, 0xda, 0x61, 0x61, 0x9d, 0x8f,
	0x0f, 0xd3, 0x80, 0xbb, 0xff, 0x09, 0xf9, 0xbd, 0x87, 0x4d, 0x91, 0xf8, 0x01, 0x1f, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0x62, 0x89, 0xf6, 0x63, 0x01, 0x00, 0x00,
}

func (m *Mortgage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mortgage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mortgage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Term) > 0 {
		i -= len(m.Term)
		copy(dAtA[i:], m.Term)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Term)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if m.Amount != 0 {
		i = encodeVarintMortgage(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Collateral) > 0 {
		i -= len(m.Collateral)
		copy(dAtA[i:], m.Collateral)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Collateral)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Lendee) > 0 {
		i -= len(m.Lendee)
		copy(dAtA[i:], m.Lendee)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Lendee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Lender) > 0 {
		i -= len(m.Lender)
		copy(dAtA[i:], m.Lender)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Lender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMortgage(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMortgage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMortgage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mortgage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	l = len(m.Lender)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	l = len(m.Lendee)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	l = len(m.Collateral)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovMortgage(uint64(m.Amount))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	l = len(m.Term)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMortgage(uint64(l))
	}
	return n
}

func sovMortgage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMortgage(x uint64) (n int) {
	return sovMortgage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mortgage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMortgage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mortgage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mortgage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lendee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lendee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collateral = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMortgage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMortgage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMortgage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMortgage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMortgage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMortgage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMortgage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMortgage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMortgage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMortgage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMortgage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMortgage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMortgage = fmt.Errorf("proto: unexpected end of group")
)
