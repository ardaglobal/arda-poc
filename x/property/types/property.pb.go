// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ardapoc/property/property.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Property struct {
	Index     string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address   string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Region    string      `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Value     uint64      `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Owners    []string    `protobuf:"bytes,5,rep,name=owners,proto3" json:"owners,omitempty"`
	Shares    []uint64    `protobuf:"varint,6,rep,packed,name=shares,proto3" json:"shares,omitempty"`
	Transfers []*Transfer `protobuf:"bytes,7,rep,name=transfers,proto3" json:"transfers,omitempty"`
	// additional metadata about the property
	PropertyId              string `protobuf:"bytes,8,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
	PropertyName            string `protobuf:"bytes,9,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	PropertyType            string `protobuf:"bytes,10,opt,name=property_type,json=propertyType,proto3" json:"property_type,omitempty"`
	ParcelNumber            string `protobuf:"bytes,11,opt,name=parcel_number,json=parcelNumber,proto3" json:"parcel_number,omitempty"`
	ParcelSize              string `protobuf:"bytes,12,opt,name=parcel_size,json=parcelSize,proto3" json:"parcel_size,omitempty"`
	ConstructionInformation string `protobuf:"bytes,13,opt,name=construction_information,json=constructionInformation,proto3" json:"construction_information,omitempty"`
	ZoningClassification    string `protobuf:"bytes,14,opt,name=zoning_classification,json=zoningClassification,proto3" json:"zoning_classification,omitempty"`
	OwnerInformation        string `protobuf:"bytes,15,opt,name=owner_information,json=ownerInformation,proto3" json:"owner_information,omitempty"`
	TenantId                string `protobuf:"bytes,16,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	UnitNumber              string `protobuf:"bytes,17,opt,name=unit_number,json=unitNumber,proto3" json:"unit_number,omitempty"`
}

func (m *Property) Reset()         { *m = Property{} }
func (m *Property) String() string { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()    {}
func (*Property) Descriptor() ([]byte, []int) {
	return fileDescriptor_57fe1e2c2afba894, []int{0}
}
func (m *Property) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Property) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Property.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Property) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property.Merge(m, src)
}
func (m *Property) XXX_Size() int {
	return m.Size()
}
func (m *Property) XXX_DiscardUnknown() {
	xxx_messageInfo_Property.DiscardUnknown(m)
}

var xxx_messageInfo_Property proto.InternalMessageInfo

func (m *Property) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Property) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Property) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Property) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Property) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Property) GetShares() []uint64 {
	if m != nil {
		return m.Shares
	}
	return nil
}

func (m *Property) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *Property) GetPropertyId() string {
	if m != nil {
		return m.PropertyId
	}
	return ""
}

func (m *Property) GetPropertyName() string {
	if m != nil {
		return m.PropertyName
	}
	return ""
}

func (m *Property) GetPropertyType() string {
	if m != nil {
		return m.PropertyType
	}
	return ""
}

func (m *Property) GetParcelNumber() string {
	if m != nil {
		return m.ParcelNumber
	}
	return ""
}

func (m *Property) GetParcelSize() string {
	if m != nil {
		return m.ParcelSize
	}
	return ""
}

func (m *Property) GetConstructionInformation() string {
	if m != nil {
		return m.ConstructionInformation
	}
	return ""
}

func (m *Property) GetZoningClassification() string {
	if m != nil {
		return m.ZoningClassification
	}
	return ""
}

func (m *Property) GetOwnerInformation() string {
	if m != nil {
		return m.OwnerInformation
	}
	return ""
}

func (m *Property) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Property) GetUnitNumber() string {
	if m != nil {
		return m.UnitNumber
	}
	return ""
}

type Transfer struct {
	From      string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To        string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_57fe1e2c2afba894, []int{1}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transfer) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transfer) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func init() {
	proto.RegisterType((*Property)(nil), "ardapoc.property.Property")
	proto.RegisterType((*Transfer)(nil), "ardapoc.property.Transfer")
}

func init() { proto.RegisterFile("ardapoc/property/property.proto", fileDescriptor_57fe1e2c2afba894) }

var fileDescriptor_57fe1e2c2afba894 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x36, 0xeb, 0x9a, 0xb7, 0xdb, 0xe8, 0xac, 0x01, 0x16, 0xa0, 0x2c, 0x1a, 0x97,
	0x4a, 0x88, 0x54, 0x62, 0x17, 0xb8, 0xc2, 0xa9, 0x12, 0x9a, 0x50, 0xd9, 0x89, 0x4b, 0xe5, 0x26,
	0x6e, 0x67, 0x29, 0xb1, 0x23, 0xdb, 0x81, 0xb5, 0x9f, 0x82, 0x8f, 0xc5, 0x71, 0x47, 0x4e, 0x08,
	0xb5, 0x5f, 0x04, 0xf9, 0x4f, 0xd6, 0x86, 0xdb, 0xfb, 0x3c, 0xcf, 0xef, 0x4d, 0xfc, 0x26, 0xaf,
	0xe1, 0x92, 0xc8, 0x9c, 0x54, 0x22, 0x9b, 0x54, 0x52, 0x54, 0x54, 0xea, 0xf5, 0x63, 0x91, 0x56,
	0x52, 0x68, 0x81, 0x46, 0x1e, 0x48, 0x1b, 0xff, 0xea, 0x4f, 0x08, 0x83, 0x2f, 0x5e, 0xa0, 0x0b,
	0x38, 0x62, 0x3c, 0xa7, 0xf7, 0x38, 0x48, 0x82, 0x71, 0x34, 0x73, 0x02, 0x61, 0x38, 0x26, 0x79,
	0x2e, 0xa9, 0x52, 0xb8, 0x6b, 0xfd, 0x46, 0xa2, 0x67, 0xd0, 0x97, 0x74, 0xc5, 0x04, 0xc7, 0x3d,
	0x1b, 0x78, 0x65, 0x9e, 0xf3, 0x9d, 0x14, 0x35, 0xc5, 0x61, 0x12, 0x8c, 0xc3, 0x99, 0x13, 0x86,
	0x16, 0x3f, 0x38, 0x95, 0x0a, 0x1f, 0x25, 0x3d, 0x43, 0x3b, 0x65, 0x7c, 0x75, 0x47, 0x24, 0x55,
	0xb8, 0x9f, 0xf4, 0xc6, 0xe1, 0xcc, 0x2b, 0xf4, 0x1e, 0x22, 0x2d, 0x09, 0x57, 0x4b, 0xd3, 0x72,
	0x9c, 0xf4, 0xc6, 0xc3, 0x77, 0x2f, 0xd2, 0xff, 0x07, 0x48, 0x6f, 0x3d, 0x32, 0xdb, 0xc3, 0xe8,
	0x12, 0x86, 0x4d, 0x3e, 0x67, 0x39, 0x1e, 0xd8, 0xc3, 0x41, 0x63, 0x4d, 0x73, 0xf4, 0x1a, 0x4e,
	0x1f, 0x01, 0x4e, 0x4a, 0x8a, 0x23, 0x8b, 0x9c, 0x34, 0xe6, 0x0d, 0x29, 0x69, 0x0b, 0xd2, 0xeb,
	0x8a, 0x62, 0x68, 0x43, 0xb7, 0xeb, 0xca, 0x41, 0x44, 0x66, 0xb4, 0x98, 0xf3, 0xba, 0x5c, 0x50,
	0x89, 0x87, 0x1e, 0xb2, 0xe6, 0x8d, 0xf5, 0xec, 0x79, 0x1c, 0xa4, 0xd8, 0x86, 0xe2, 0x13, 0x7f,
	0x1e, 0x6b, 0x7d, 0x65, 0x1b, 0x8a, 0x3e, 0x00, 0xce, 0x04, 0x57, 0x5a, 0xd6, 0x99, 0x66, 0x82,
	0xcf, 0x19, 0x5f, 0x0a, 0x59, 0x12, 0x53, 0xe3, 0x53, 0x4b, 0x3f, 0x3f, 0xcc, 0xa7, 0xfb, 0x18,
	0x5d, 0xc3, 0xd3, 0x8d, 0xe0, 0x8c, 0xaf, 0xe6, 0x59, 0x41, 0x94, 0x62, 0x4b, 0x96, 0xb9, 0xbe,
	0x33, 0xdb, 0x77, 0xe1, 0xc2, 0x4f, 0xad, 0x0c, 0xbd, 0x81, 0x73, 0xfb, 0xf1, 0x5b, 0x2f, 0x7a,
	0x62, 0x1b, 0x46, 0x36, 0x38, 0x7c, 0xc3, 0x4b, 0x88, 0x34, 0xe5, 0x84, 0x6b, 0xf3, 0x2d, 0x47,
	0x16, 0x1a, 0x38, 0x63, 0x9a, 0x9b, 0xd1, 0x6a, 0xce, 0x74, 0x33, 0xfd, 0xb9, 0x1b, 0xcd, 0x58,
	0x6e, 0xf6, 0xab, 0xcf, 0x30, 0x68, 0x7e, 0x11, 0x42, 0x10, 0x2e, 0xa5, 0x28, 0xfd, 0x7a, 0xd9,
	0x1a, 0x9d, 0x41, 0x57, 0x0b, 0xbf, 0x58, 0x5d, 0x2d, 0xd0, 0x2b, 0x88, 0x34, 0x2b, 0xa9, 0xd2,
	0xa4, 0xac, 0xfc, 0x5a, 0xed, 0x8d, 0x8f, 0xd3, 0x5f, 0xdb, 0x38, 0x78, 0xd8, 0xc6, 0xc1, 0xdf,
	0x6d, 0x1c, 0xfc, 0xdc, 0xc5, 0x9d, 0x87, 0x5d, 0xdc, 0xf9, 0xbd, 0x8b, 0x3b, 0xdf, 0x26, 0x2b,
	0xa6, 0xef, 0xea, 0x45, 0x9a, 0x89, 0x72, 0x62, 0x96, 0x64, 0x55, 0x88, 0x05, 0x29, 0x6c, 0xf9,
	0xd6, 0x5c, 0x89, 0xfb, 0xfd, 0xa5, 0x30, 0x3f, 0x53, 0x2d, 0xfa, 0xf6, 0x4a, 0x5c, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x98, 0x23, 0x78, 0xfc, 0x35, 0x03, 0x00, 0x00,
}

func (m *Property) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Property) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnitNumber) > 0 {
		i -= len(m.UnitNumber)
		copy(dAtA[i:], m.UnitNumber)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.UnitNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.OwnerInformation) > 0 {
		i -= len(m.OwnerInformation)
		copy(dAtA[i:], m.OwnerInformation)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.OwnerInformation)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ZoningClassification) > 0 {
		i -= len(m.ZoningClassification)
		copy(dAtA[i:], m.ZoningClassification)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.ZoningClassification)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ConstructionInformation) > 0 {
		i -= len(m.ConstructionInformation)
		copy(dAtA[i:], m.ConstructionInformation)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.ConstructionInformation)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ParcelSize) > 0 {
		i -= len(m.ParcelSize)
		copy(dAtA[i:], m.ParcelSize)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.ParcelSize)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ParcelNumber) > 0 {
		i -= len(m.ParcelNumber)
		copy(dAtA[i:], m.ParcelNumber)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.ParcelNumber)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PropertyType) > 0 {
		i -= len(m.PropertyType)
		copy(dAtA[i:], m.PropertyType)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.PropertyType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PropertyName) > 0 {
		i -= len(m.PropertyName)
		copy(dAtA[i:], m.PropertyName)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.PropertyName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PropertyId) > 0 {
		i -= len(m.PropertyId)
		copy(dAtA[i:], m.PropertyId)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.PropertyId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProperty(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Shares) > 0 {
		dAtA2 := make([]byte, len(m.Shares)*10)
		var j1 int
		for _, num := range m.Shares {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProperty(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintProperty(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Value != 0 {
		i = encodeVarintProperty(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintProperty(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProperty(dAtA []byte, offset int, v uint64) int {
	offset -= sovProperty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Property) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovProperty(uint64(m.Value))
	}
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovProperty(uint64(l))
		}
	}
	if len(m.Shares) > 0 {
		l = 0
		for _, e := range m.Shares {
			l += sovProperty(uint64(e))
		}
		n += 1 + sovProperty(uint64(l)) + l
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovProperty(uint64(l))
		}
	}
	l = len(m.PropertyId)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.PropertyName)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.PropertyType)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.ParcelNumber)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.ParcelSize)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.ConstructionInformation)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.ZoningClassification)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.OwnerInformation)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 2 + l + sovProperty(uint64(l))
	}
	l = len(m.UnitNumber)
	if l > 0 {
		n += 2 + l + sovProperty(uint64(l))
	}
	return n
}

func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovProperty(uint64(l))
	}
	return n
}

func sovProperty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProperty(x uint64) (n int) {
	return sovProperty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Property) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperty
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shares = append(m.Shares, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperty
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProperty
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProperty
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Shares) == 0 {
					m.Shares = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProperty
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shares = append(m.Shares, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropertyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParcelNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParcelNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParcelSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParcelSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructionInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstructionInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoningClassification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoningClassification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerInformation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerInformation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProperty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProperty
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProperty
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProperty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProperty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProperty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProperty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProperty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProperty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProperty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProperty = fmt.Errorf("proto: unexpected end of group")
)
